Vi add.x 
struct num{
	int a;
	int b;
};
program add_prog{
version add_ver{
	int addition(num)=1;
}=1;
}=0x20000002;
 Next compile the program 
$  rpcgen –a add.x

Vi add_client.c
#include "add.h"
void
add_prog_1(char *host)
{
	CLIENT *clnt;
	int  *result_1;
	num  addition_1_arg;
#ifndef	DEBUG
	clnt = clnt_create (host, add_prog, add_ver, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);    }
#endif	/* DEBUG */
	printf("\n enter the two number to add...\n"); // reading 2 numbers for addition
	scanf("%d%d",&addition_1_arg.a,&addition_1_arg.b); // assigned readed number
	result_1=(int *) malloc(sizeof(int)); // allocate memroy
	result_1 = addition_1(&addition_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");       }
#ifndef	DEBUG
	printf("\n the of %d\t%d is ..... %d\n",addition_1_arg.a,addition_1_arg.b,*result_1);
	clnt_destroy (clnt);
#endif	 /* DEBUG */     }
int
main (int argc, char *argv[])
{
	char *host;
	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1); }
	host = argv[1];
	add_prog_1 (host);
exit (0);
}
Vi add_server.c
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */
#include "add.h"
int *
addition_1_svc(num *argp, struct svc_req *rqstp)
{
	static int  result;
	/*
	 * insert server code here
	 */
	result = argp->a + argp->b; // adding numbers
	return &result;
}
Next compile the code using the command
$cc –o add_client.c add_clnt.c –lnsl addclient
$cc –o add_server.c add_svc.c –lnsl addserver
After successfully compilation execut the program by using command
$./addserver &
$./addclient 10.2.0.3 
