Vi msg.x
program msg_prog{
version msg_ver{
		string message()=1;
}=1;
}=0x20000001;
Next compile the program by using command 
$ rpcgen –a msg.x
Vi msg_client.c
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */
#include "msg.h"
void
msg_prog_1(char *host)
{
	CLIENT *clnt;
	char * *result_1;
	char *message_1_arg;
#ifndef	DEBUG
	clnt = clnt_create (host, msg_prog, msg_ver, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
      *result_1=(char*) malloc (sizeof(char) *25);
	result_1 = message_1((void*)&message_1_arg, clnt);
	if (result_1 == (char **) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */    }
int
main (int argc, char *argv[])
{
	char *host;
	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);  }
	host = argv[1];
	msg_prog_1 (host);
exit (0);    }
Vi msg_server.c
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */
#include "msg.h"
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
char **
message_1_svc(void *argp, struct svc_req *rqstp)
{
	static char * result;
	/*
	 * insert server code here
	 */
	result=(char *) malloc(sizeof(char)*25);
	strcpy(result,"hello-this is a response from rpc server");
	return &result;
}
Next compile the code using the command
$cc –o msg_client.c msg_clnt.c –lnsl msgclient
$cc –o msg_server.c msg_svc.c –lnsl msgserver
After successfully compilation execute the program by using command
$./msgserver &
$./msgclient 10.2.0.3 
